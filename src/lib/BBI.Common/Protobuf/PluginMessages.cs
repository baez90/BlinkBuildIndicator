// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PluginMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BBI.Common.Protobuf {

  /// <summary>Holder for reflection information generated from PluginMessages.proto</summary>
  public static partial class PluginMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for PluginMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PluginMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQbHVnaW5NZXNzYWdlcy5wcm90bxIMQkJJLlByb3RvYnVmIgcKBUVtcHR5",
            "Im0KCUNJUmVxdWVzdBIQCgh1c2VybmFtZRgBIAEoCRIQCghwYXNzd29yZBgC",
            "IAEoCRIOCgZ1c2VTU0wYAyABKAgSHAoUYnVpbGRDb25maWd1cmF0aW9uSWQY",
            "BCABKAkSDgoGYnJhbmNoGAUgASgJIm0KCkNJUmVzcG9uc2USNQoEdHlwZRgB",
            "IAEoDjInLkJCSS5Qcm90b2J1Zi5DSVJlc3BvbnNlLkNJUmVzcG9uc2VUeXBl",
            "IigKDkNJUmVzcG9uc2VUeXBlEgsKB1NVQ0NFU1MQABIJCgVFUlJPUhABIjwK",
            "ElBsdWdpblJlZ2lzdHJhdGlvbhISCgpwbHVnaW5OYW1lGAEgASgJEhIKCnBs",
            "dWdpblBvcnQYAiABKAUi1wEKF1BsdWdpblJlZ2lzdHJhdGlvblJlcGx5ElYK",
            "EHJlZ2lzdHJhdGlvbkNvZGUYASABKA4yPC5CQkkuUHJvdG9idWYuUGx1Z2lu",
            "UmVnaXN0cmF0aW9uUmVwbHkuUGx1Z2luUmVnaXN0cmF0aW9uQ29kZSJkChZQ",
            "bHVnaW5SZWdpc3RyYXRpb25Db2RlEgsKB1NVQ0NFU1MQABIUChBDT05GTElD",
            "VElOR19OQU1FEAESFAoQQ09ORkxJQ1RJTkdfUE9SVBACEhEKDVVOS05PV05f",
            "RVJST1IQA0IWqgITQkJJLkNvbW1vbi5Qcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BBI.Common.Protobuf.Empty), global::BBI.Common.Protobuf.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BBI.Common.Protobuf.CIRequest), global::BBI.Common.Protobuf.CIRequest.Parser, new[]{ "Username", "Password", "UseSSL", "BuildConfigurationId", "Branch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BBI.Common.Protobuf.CIResponse), global::BBI.Common.Protobuf.CIResponse.Parser, new[]{ "Type" }, null, new[]{ typeof(global::BBI.Common.Protobuf.CIResponse.Types.CIResponseType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BBI.Common.Protobuf.PluginRegistration), global::BBI.Common.Protobuf.PluginRegistration.Parser, new[]{ "PluginName", "PluginPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BBI.Common.Protobuf.PluginRegistrationReply), global::BBI.Common.Protobuf.PluginRegistrationReply.Parser, new[]{ "RegistrationCode" }, null, new[]{ typeof(global::BBI.Common.Protobuf.PluginRegistrationReply.Types.PluginRegistrationCode) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BBI.Common.Protobuf.PluginMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CIRequest : pb::IMessage<CIRequest> {
    private static readonly pb::MessageParser<CIRequest> _parser = new pb::MessageParser<CIRequest>(() => new CIRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CIRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BBI.Common.Protobuf.PluginMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIRequest(CIRequest other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      useSSL_ = other.useSSL_;
      buildConfigurationId_ = other.buildConfigurationId_;
      branch_ = other.branch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIRequest Clone() {
      return new CIRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "useSSL" field.</summary>
    public const int UseSSLFieldNumber = 3;
    private bool useSSL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSSL {
      get { return useSSL_; }
      set {
        useSSL_ = value;
      }
    }

    /// <summary>Field number for the "buildConfigurationId" field.</summary>
    public const int BuildConfigurationIdFieldNumber = 4;
    private string buildConfigurationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildConfigurationId {
      get { return buildConfigurationId_; }
      set {
        buildConfigurationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "branch" field.</summary>
    public const int BranchFieldNumber = 5;
    private string branch_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Branch {
      get { return branch_; }
      set {
        branch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CIRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CIRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (UseSSL != other.UseSSL) return false;
      if (BuildConfigurationId != other.BuildConfigurationId) return false;
      if (Branch != other.Branch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (UseSSL != false) hash ^= UseSSL.GetHashCode();
      if (BuildConfigurationId.Length != 0) hash ^= BuildConfigurationId.GetHashCode();
      if (Branch.Length != 0) hash ^= Branch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (UseSSL != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseSSL);
      }
      if (BuildConfigurationId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BuildConfigurationId);
      }
      if (Branch.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Branch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (UseSSL != false) {
        size += 1 + 1;
      }
      if (BuildConfigurationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildConfigurationId);
      }
      if (Branch.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Branch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CIRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.UseSSL != false) {
        UseSSL = other.UseSSL;
      }
      if (other.BuildConfigurationId.Length != 0) {
        BuildConfigurationId = other.BuildConfigurationId;
      }
      if (other.Branch.Length != 0) {
        Branch = other.Branch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 24: {
            UseSSL = input.ReadBool();
            break;
          }
          case 34: {
            BuildConfigurationId = input.ReadString();
            break;
          }
          case 42: {
            Branch = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CIResponse : pb::IMessage<CIResponse> {
    private static readonly pb::MessageParser<CIResponse> _parser = new pb::MessageParser<CIResponse>(() => new CIResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CIResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BBI.Common.Protobuf.PluginMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIResponse(CIResponse other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIResponse Clone() {
      return new CIResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::BBI.Common.Protobuf.CIResponse.Types.CIResponseType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BBI.Common.Protobuf.CIResponse.Types.CIResponseType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CIResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CIResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CIResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::BBI.Common.Protobuf.CIResponse.Types.CIResponseType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CIResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CIResponseType {
        [pbr::OriginalName("SUCCESS")] Success = 0,
        [pbr::OriginalName("ERROR")] Error = 1,
      }

    }
    #endregion

  }

  public sealed partial class PluginRegistration : pb::IMessage<PluginRegistration> {
    private static readonly pb::MessageParser<PluginRegistration> _parser = new pb::MessageParser<PluginRegistration>(() => new PluginRegistration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PluginRegistration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BBI.Common.Protobuf.PluginMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginRegistration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginRegistration(PluginRegistration other) : this() {
      pluginName_ = other.pluginName_;
      pluginPort_ = other.pluginPort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginRegistration Clone() {
      return new PluginRegistration(this);
    }

    /// <summary>Field number for the "pluginName" field.</summary>
    public const int PluginNameFieldNumber = 1;
    private string pluginName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PluginName {
      get { return pluginName_; }
      set {
        pluginName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pluginPort" field.</summary>
    public const int PluginPortFieldNumber = 2;
    private int pluginPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PluginPort {
      get { return pluginPort_; }
      set {
        pluginPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PluginRegistration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PluginRegistration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PluginName != other.PluginName) return false;
      if (PluginPort != other.PluginPort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PluginName.Length != 0) hash ^= PluginName.GetHashCode();
      if (PluginPort != 0) hash ^= PluginPort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PluginName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PluginName);
      }
      if (PluginPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PluginPort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PluginName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PluginName);
      }
      if (PluginPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PluginPort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PluginRegistration other) {
      if (other == null) {
        return;
      }
      if (other.PluginName.Length != 0) {
        PluginName = other.PluginName;
      }
      if (other.PluginPort != 0) {
        PluginPort = other.PluginPort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PluginName = input.ReadString();
            break;
          }
          case 16: {
            PluginPort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PluginRegistrationReply : pb::IMessage<PluginRegistrationReply> {
    private static readonly pb::MessageParser<PluginRegistrationReply> _parser = new pb::MessageParser<PluginRegistrationReply>(() => new PluginRegistrationReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PluginRegistrationReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BBI.Common.Protobuf.PluginMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginRegistrationReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginRegistrationReply(PluginRegistrationReply other) : this() {
      registrationCode_ = other.registrationCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginRegistrationReply Clone() {
      return new PluginRegistrationReply(this);
    }

    /// <summary>Field number for the "registrationCode" field.</summary>
    public const int RegistrationCodeFieldNumber = 1;
    private global::BBI.Common.Protobuf.PluginRegistrationReply.Types.PluginRegistrationCode registrationCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BBI.Common.Protobuf.PluginRegistrationReply.Types.PluginRegistrationCode RegistrationCode {
      get { return registrationCode_; }
      set {
        registrationCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PluginRegistrationReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PluginRegistrationReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RegistrationCode != other.RegistrationCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RegistrationCode != 0) hash ^= RegistrationCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RegistrationCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RegistrationCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RegistrationCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RegistrationCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PluginRegistrationReply other) {
      if (other == null) {
        return;
      }
      if (other.RegistrationCode != 0) {
        RegistrationCode = other.RegistrationCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            registrationCode_ = (global::BBI.Common.Protobuf.PluginRegistrationReply.Types.PluginRegistrationCode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PluginRegistrationReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PluginRegistrationCode {
        [pbr::OriginalName("SUCCESS")] Success = 0,
        [pbr::OriginalName("CONFLICTING_NAME")] ConflictingName = 1,
        [pbr::OriginalName("CONFLICTING_PORT")] ConflictingPort = 2,
        [pbr::OriginalName("UNKNOWN_ERROR")] UnknownError = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
